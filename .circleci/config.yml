---
version: 2.1

orbs:
  executor-tools: twdps/executor-tools@4.0.1
  op: twdps/onepassword@3.0.0
  do: twdps/pipeline-events@5.0.1

globals:
  - &context platform
  - &shell op run --env-file op.env -- /bin/bash -eo pipefail

on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

# on-each-run: &on-each-run
#   branches:
#     only: /main/
#   tags:
#     only: /.*/

# on-tag-main: &on-tag-main
#   branches:
#     ignore: /.*/
#   tags:
#     only: /.*/

# commands:

#   set-environment:
#     steps:
#       - op/env
#       - op/write-to-file:
#           op-value: platform/svc-cosign-private-key/notesPlain
#           out-file: cosign.key
#       - op/write-to-file:
#           op-value: platform/svc-cosign-public-key/notesPlain
#           out-file: cosign.pub

workflows:

  schedule monthly build:
    jobs:
      - do/schedule-pipeline:
          name: configure monthly trigger
          shell: *shell
          context: *context
          scheduled-pipeline-name: Monthly General Release
          scheduled-pipeline-description: |
            Automatically build and release a current version of the remote-docker-ready image
            using the YYYY.MM tag format.
          hours-of-day: "[11]" # 11 am UTC = 6am Central
          days-of-month: "[5]" # 5th of each month
          filters: *on-push-main

#  - checkout
#       - run:
#           name: Set Git user
#           command: |
#             git config --global user.email "your-email@example.com"
#             git config --global user.name "CircleCI Automation"
#       - run:
#           name: Determine tag name
#           command: |
#             # Example 1: Using the current date
#             TAG_NAME="v$(date +'%Y%m%d')"
#             echo "TAG_NAME=${TAG_NAME}" >> $BASH_ENV
#             source $BASH_ENV

#             # Example 2: Using a build number (if available as an environment variable)
#             # TAG_NAME="build-${CIRCLE_BUILD_NUM}"
#             # echo "TAG_NAME=${TAG_NAME}" >> $BASH_ENV
#             # source $BASH_ENV

#             # Example 3: You might have a more sophisticated versioning scheme
#             # (e.g., reading from a file or using a script)
#             # TAG_NAME=$(./scripts/get_version.sh)
#             # echo "TAG_NAME=${TAG_NAME}" >> $BASH_ENV
#             # source $BASH_ENV
#       - run:
#           name: Create and push tag
#           command: |
#             git tag -a "${TAG_NAME}" -m "Automated tag for build ${CIRCLE_BUILD_NUM:-'unknown'}"
#             git push origin "${TAG_NAME}"


  # build and publish:
  #   jobs:
  #     - executor-tools/dev-release:
  #         name: alpine image build
  #         context: *context
  #         shell: *shell
  #         dockerfile: Dockerfile.alpine
  #         image: twdps/circleci-remote-docker
  #         tag: alpine-edge
  #         snyk-scan: true
  #         snyk-severity-threshold: medium
  #         snyk-organization: twplatformlabs
  #         bats-test: true
  #         bats-run-container-name: circleci-remote-docker-alpine-edge
  #         bats-entry-point: /bin/ash
  #         bats-test-path: test/circleci_remote_docker_alpine.bats
  #         opencontainer-labels: true
  #         security-scan-nofail: true
  #         after-checkout:
  #           - op/env
  #         filters: *on-each-run

  #     - executor-tools/dev-release:
  #         name: ubuntu image build
  #         context: *context
  #         shell: *shell
  #         dockerfile: Dockerfile.ubuntu
  #         image: twdps/circleci-remote-docker
  #         tag: ubuntu-edge
  #         snyk-scan: true
  #         snyk-severity-threshold: medium
  #         snyk-organization: twplatformlabs
  #         bats-test: true
  #         bats-run-container-name: circleci-remote-docker-ubuntu-edge
  #         bats-entry-point: /bin/bash
  #         bats-test-path: test/circleci_remote_docker_ubuntu.bats
  #         opencontainer-labels: true
  #         security-scan-nofail: true
  #         after-checkout:
  #           - op/env
  #         filters: *on-each-run

  #     - executor-tools/publish:
  #         name: alpine release
  #         context: *context
  #         shell: *shell
  #         image: twdps/circleci-remote-docker
  #         pull-tag: alpine-edge
  #         tag-annotation: alpine-
  #         release-tag: alpine-stable
  #         sign-image: true
  #         sbom: true
  #         after-checkout:
  #           - set-environment
  #         requires:
  #           - alpine image build
  #           - ubuntu image build
  #         filters: *on-tag-main

  #     - executor-tools/publish:
  #         name: ubuntu release
  #         context: *context
  #         shell: *shell
  #         image: twdps/circleci-remote-docker
  #         pull-tag: ubuntu-edge
  #         tag-annotation: ubuntu-
  #         release-tag: ubuntu-stable
  #         sign-image: true
  #         sbom: true
  #         after-checkout:
  #           - set-environment
  #         requires:
  #           - alpine image build
  #           - ubuntu image build
  #         filters: *on-tag-main

  #     - do/gh-release:
  #         name: generate release notes
  #         shell: *shell
  #         context: *context
  #         notes-from-file: release.md
  #         include-commit-msg: true
  #         upload-artifacts: true
  #         artifact-folder: workspace
  #         before-release:
  #           - set-environment
  #         requires:
  #           - alpine release
  #           - ubuntu release
  #         filters: *on-tag-main

  #     - do/slack:
  #         context: *context
  #         channel: lab-events
  #         message: "New twdps/circleci-remote-docker release"
  #         include-tag: true
  #         filters: *on-tag-main
  #         before-message:
  #           - op/env
  #         requires:
  #           - alpine release
  #           - ubuntu release

  # schedule ci build:
  #   jobs:
  #     - do/schedule-pipeline:
  #         name: configure weekly trigger
  #         shell: *shell
  #         context: *context
  #         scheduled-pipeline-name: weekly-ci-build
  #         scheduled-pipeline-description: |
  #           Automatically trigger image build on a weekly schedule. Failure of
  #           this recurring build indicates new releases of dependent packages.
  #         hours-of-day: "[1]"
  #         days-of-week: "[\"SUN\"]"
  #         filters: *on-tag-main
